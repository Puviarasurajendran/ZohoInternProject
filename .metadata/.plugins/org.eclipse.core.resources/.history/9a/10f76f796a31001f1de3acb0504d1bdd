package restaction;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts2.interceptor.ServletRequestAware;
import org.apache.struts2.interceptor.ServletResponseAware;

import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;

import proxy.ProxyFactoryUtil;
import restdao.CustomersDAO;
import restdao.CustomersInterface;
import restmodel.Customer;

public class CustomersRestAction extends ActionSupport implements ModelDriven<Customer> ,ServletRequestAware , ServletResponseAware{

	Customer customer= new Customer();
	List cutomersList;
	CustomersDAO customersDAO ;

	int cid;
	String message;

	HttpServletRequest request;
	HttpServletResponse response;
	
	   String idParam = "";
       String version = "";
       
       public CustomersRestAction() {
           ProxyFactoryUtil proxyFactory = new ProxyFactoryUtil();
           customersDAO = (CustomersDAO) proxyFactory.createProxy();
       }


	@Override
	public Customer getModel() {
		return customer;
	}

	@Override
	public void setServletRequest(HttpServletRequest req) {
		this.request=req;
	}

	
	public void setServletResponse(HttpServletResponse res) {
		 this.response=res;
	}
	
	@Override
	public String execute() {

		String method= request.getMethod();
		System.out.println("Request Method :"+method);
		switch(method) {
			case "GET":
				return getAllCustomersVersion();
//				return getAllCustomers();

			case "POST":
				return createCustomer();

			case "PUT":
				return updateCustomer();
			case "DELETE":
				return deleteCustomer();

			default:
				response.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
				return ERROR;

		}

	}

	 public String getCustomerById() {
		 try {
	         ArrayList al = new ArrayList();
	        al.add(customersDAO.getCustomerById(cid));
	        System.out.println("Get customerByID :"+al);
	        
	        if (al.get(0)!=null) {
	        	setCutomersList(al);
	            System.out.println("customerList :" + getCutomersList());
	            message = "customer details are retrieved successfully";
	            return SUCCESS;
	        	
	        } else {
	        	message="Customer not found";
	            return ERROR;
	        }
		 }catch(Exception e) {
			 e.printStackTrace();
			 return ERROR;
		 }
	    }

		public String createCustomer() {
	    	  try {

	    	        System.out.println("Customer Name: " + customer.toString());
	    	        customersDAO.createCustomer(customer);
	    	        message="Customer detail Created Successfully";
	    	        return INPUT;
	    	    } catch (Exception e) {
	    	        e.printStackTrace();
	    	        message="Failed to create customer";
	    	        return ERROR;
	    	    }
	    }

	    public String updateCustomer() {
	    	System.out.println("Update Customer :"+customer);
	        customersDAO.updateCustomer(customer);
	        message="Customer detail Updated Successfully";
	        return INPUT;
	       
	    }
     

	    public String deleteCustomer() {
	    	System.out.println("Enter into Delete method :"+cid);
	        customersDAO.deleteCustomer(cid);
	        message="Customer id "+cid+" deleted Successfully";
	        return INPUT;
	    }

	    public String getAllCustomersVersion() {
	        idParam = request.getParameter("cid");
	        version = request.getRequestURI().contains("/v2/") ? "v2" : "v1";

	        System.out.println("id Param: " + idParam);
	        System.out.println("API Version: " + version);

	        if (idParam == null) {
	            List<Map<String,Object>> allCustomers = customersDAO.getTotalCutomers();
	                cutomersList = allCustomers;
	                System.out.println("customerList: " + cutomersList);
	                message = "All the customer details are retrieved successfully";
	                return SUCCESS;
	            
	        } else {
	            return getCustomerById();
	        }
	    }
		   
		public String getAllCustomers() {

			String idParam = request.getParameter("cid");
			
			System.out.println("id Param :"+idParam);
			if(idParam==null) {
			cutomersList=customersDAO.getTotalCutomers();
			System.out.println("customerList :"+cutomersList);
			message="All the customer details are retrieved successfully";
			return SUCCESS;
			}
			else {
				getCustomerById();
			}
			return (cutomersList!=null)?SUCCESS:INPUT;
		}

		public Customer getCustomer() {
			return customer;
		}

		public void setCustomer(Customer customer) {
			this.customer = customer;
		}

		public List<Customer> getCutomersList() {
			return cutomersList;
		}

		public void setCutomersList(List cutomersList) {
			this.cutomersList = cutomersList;
		}

		public CustomersInterface getCustomersDAO() {
			return customersDAO;
		}

		public void setCustomersDAO(CustomersInterface customersDAO) {
			this.customersDAO = customersDAO;
		}

		public int getCid() {
			return cid;
		}

		public void setCid(int cid) {
			this.cid = cid;
		}

		public String getMessage() {
			return message;
		}

		public void setMessage(String message) {
			this.message = message;
		}

		public HttpServletRequest getRequest() {
			return request;
		}

		public void setRequest(HttpServletRequest request) {
			this.request = request;
		}

}
