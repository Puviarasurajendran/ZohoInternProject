package proxy;
import java.lang.reflect.Method;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.ServletActionContext;
import javassist.util.proxy.MethodHandler;
import javassist.util.proxy.ProxyFactory;

public class ProxyFactoryUtil {

	    public Object createProxy(Object target) {
	    	
	        ProxyFactory factory = new ProxyFactory();
	        factory.setSuperclass(target.getClass().getSuperclass()); // Use superclass as superclass
	        Class<?> proxyClass = factory.createClass();
	        Object proxy;
	        try {
	            proxy = (Object) proxyClass.getDeclaredConstructor().newInstance();
	        } catch (Exception e) {
	            throw new RuntimeException("Failed to instantiate proxy", e);
	        }

	        MethodHandler handler = new MethodHandler() {
	            @Override
	            public Object invoke(Object self, Method method, Method proceed, Object[] args) throws Throwable {
	                HttpServletRequest request = ServletActionContext.getRequest();
	                String version = request.getRequestURI().contains("/v2/") ? "v2" : "v1";

	                System.out.println("Before proxy execution: " + method.getName());
//
//	                if ("v2".equals(version) && "getTotalCustomers".equals(method.getName())) {
//	                    Method version2Method = target.getClass().getMethod("getTotalCustomersVersion2", method.getParameterTypes());
//	                    return version2Method.invoke(target, args);
//	                }
//
//	                if ("v2".equals(version) && "getCustomerById".equals(method.getName())) {
//	                    Method version2Method = target.getClass().getMethod("getCustomerByIdVersion2", method.getParameterTypes());
//	                    return version2Method.invoke(target, args);
//	                }

	                // Default behavior if no special handling is required
	                return method.invoke(target, args);
	            }
	        };

	        ((ProxyFactory) proxy).setHandler(handler);
	        return proxy;
	    }
	}


